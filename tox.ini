# Tox configuration file
# Read more under https://tox.readthedocs.io/

[tox]
minversion = 3.28
envlist =
    erase
    py37
    py38
    py39
    py310
    ; py311
    coverage
isolated_build = True


[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    coverage run --context={envname} -m pytest {posargs}
parallel_show_output = True


[testenv:erase]
description = Remove all coverage files from the workspace
skip_install = True
changedir = {toxinidir}
deps =
    coverage
commands =
    coverage erase
    python -c 'import shutil; shutil.rmtree("htmlcov", True)'


[testenv:coverage]
description = Produce a human-readable coverage report for all environments tested
skip_install = True
changedir = {toxinidir}
deps =
    coverage
depends =
    # needed to ensure if `tox -e coverage` is used in the terminal,
    # then this environment does cause errors
    erase
    py37
    py38
    py39
    py310
    ; py311
commands =
    coverage combine
    coverage html


[testenv:lint]
description = Perform static analysis and style checks to ensure code standard conformity
skip_install = True
deps =
    pre-commit
passenv =
    HOME
    HOMEPATH
    PROGRAMDATA
    SETUPTOOLS_*
commands =
    pre-commit run {posargs:--all-files}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.readthedocs.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}


[testenv:{docs,doctests,linkcheck,serve}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
    serve: Spin-up a local server serving compiled documentation (http://localhost:8000/)
changedir={toxinidir}/docs
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    SPHINXINTL_LANGUAGE=ja
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/requirements/dev.txt
commands =
    sphinx-build -b gettext . _build/gettext
    sphinx-intl update -p _build/gettext
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}
    serve: python -m http.server --directory '../docs/_build/html'


[testenv:publish]
description =
    Publish the package to PyPI. By default, it uses testpypi, but to make it
    publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_PASSWORD
    TWINE_REPOSITORY
setenv =
    TWINE_USERNAME = {env:TWINE_USERNAME:__token__}
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
