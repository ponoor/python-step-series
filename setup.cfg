# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = python-step-series
description = A Python library for OSC communication with the Ponoor Step-series devices.
author = Julian_Orteil
author_email =
license = MIT
license_files = LICENSE.txt
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
url = https://github.com/ponoor/python-step-series
project_urls =
    Documentation = https://python-step-series.readthedocs.io/en/stable/index.html
    Source = https://github.com/ponoor/python-step-series
    Changelog = https://github.com/ponoor/python-step-series/blob/main/CHANGELOG.rst
    Tracker = https://github.com/ponoor/python-step-series/issues
    Download = https://pypi.org/project/python-step-series/#files

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 5 - Production/Stable
    Programming Language :: Python
    Programming Language :: Python :: 3 :: Only
    Intended Audience :: Developers
    Natural Language :: English
    Natural Language :: Japanese
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Typing :: Typed
keywords = ponoor, step400, step800, motor


[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
python_requires = >=3.7

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    python-osc==1.8.0


[options.packages.find]
where = src
exclude =
    __pycache__
    .envs
    *.egg
    .eggs
    .github
    .tox
    .vscode
    assets
    bin
    build
    dist
    docs/conf.py
    locale
    requirements
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install python-step-series[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    coverage==7.0.1
    pytest==7.2.0
    pytest-sugar==0.9.6
    pytest-order==1.0.1

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = stepseries.module:function
# For example:
# console_scripts =
#     fibonacci = stepseries.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --strict-markers
    --strict-config
    --tb=short
    --verbose
    --capture=no
norecursedirs =
    __pycache__
    .envs
    *.egg
    .eggs
    .github
    .tox
    .vscode
    assets
    bin
    build
    dist
    docs/conf.py
    locale
    requirements
testpaths = tests
xfail_strict = True
# Use pytest markers to select/deselect specific tests
markers =
    incremental: xfails further tests in a class if the current fails

    skip_400_disconnected: skips marked tests (or suites) if STEP400 hardware is not detected
    check_400_embrake: verifies configuration and device statuses before running tests that involve the EM-brake
    check_400_homesw: verifies configuration and device statuses before running tests that involve the home sw
    check_400_limitsw: verifies configuration and device statuses before running tests that involve the limit sw
    check_400_motors: verifies configuration and device statuses before allowing a test to physically run motors
    reset_400_device: after a test suite (class) finishes, reset the device to provide a blank slate
    skip_400_not_configured: skips marked tests (or suites) if test presets have not been flagged as configured

    skip_800_disconnected: skips marked tests (or suites) if STEP800 hardware is not detected
    check_800_embrake: verifies configuration and device statuses before running tests that involve the EM-brake
    check_800_homesw: verifies configuration and device statuses before running tests that involve the home sw
    check_800_motors: verifies configuration and device statuses before allowing a test to physically run motors
    reset_800_device: after a test suite (class) finishes, reset the device to provide a blank slate
    skip_800_not_configured: skips marked tests (or suites) if test presets have not been flagged as configured

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
strictness = long
show-source = True
max-line-length = 100
max-complexity = 6
docstring-style = google
extend_ignore = E203, W503
                # ^  Black-compatible
                #    E203 and W503 have edge cases handled by black
exclude =
    __pycache__
    .envs
    *.egg
    .eggs
    .github
    .tox
    .vscode
    assets
    bin
    build
    dist
    docs/conf.py
    locale
    requirements
ignore = D100,D104,D401,DAR103,DAR203,E800,N802,Q000,RST303,RST304,S101,W504,WPS326
per-file-ignores =
    setup.py: WPS421, C813
    tests/conftest.py: D208, E800
rst-directives =
    # These are sorted alphabetically - but that does not matter
    autosummary,data,currentmodule,deprecated,
    glossary,moduleauthor,plot,testcode,
    versionadded,versionchanged,
rst-roles =
    attr,class,func,meth,mod,obj,ref,term,
    # C programming language:
    c:member,
    # Python programming language:
    py:func,py:mod,

[isort]
include_trailing_comma = True
use_parentheses = True
multi_line_output = 3
line_length = 100
profile = black
known_first_party = stepseries

[mypy]
allow_redefinition = False
check_untyped_defs = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
local_partial_types = True
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True
warn_no_return = True

[coverage:run]
branch = True
source = stepseries
concurrency = multiprocessing
parallel = True
omit =
    *tests*

[coverage:paths]
source =
    */site-packages/
    */stepseries/

[coverage:html]
show_contexts = True

[coverage:report]
fail_under = 100
show_missing = True
exclude_lines =
    pragma: no cover

    def __repr__
    if self\.debug

    raise AssertionError
    raise NotImplementedError

    if 0:
    if __name__ == .__main__.:

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.1.1
package = stepseries
extensions =
    no_skeleton
    pre_commit
